// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using om.servicing.casemanagement.data.Context;

#nullable disable

namespace om.servicing.casemanagement.data.Migrations
{
    [DbContext(typeof(CaseManagerContext))]
    partial class CaseManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("om.servicing.casemanagement.domain.Entities.OMCase", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("channel")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.ToTable("case");
                });

            modelBuilder.Entity("om.servicing.casemanagement.domain.Entities.OMInteraction", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<string>("CaseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("case_id")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("interaction");
                });

            modelBuilder.Entity("om.servicing.casemanagement.domain.Entities.OMTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<string>("CaseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("case_id")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("InteractionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("interaction_id")
                        .HasColumnOrder(3);

                    b.Property<bool>("IsImmediate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_immediate");

                    b.Property<string>("ProcessedDetails")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("processed_details");

                    b.Property<string>("ReceivedDetails")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("received_details");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("status");

                    b.Property<string>("TransactionTypeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("transaction_type_id")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("InteractionId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("transaction");
                });

            modelBuilder.Entity("om.servicing.casemanagement.domain.Entities.OMTransactionType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.Property<bool>("RequiresApproval")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_approval");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.ToTable("transaction_type");
                });

            modelBuilder.Entity("om.servicing.casemanagement.domain.Entities.OMInteraction", b =>
                {
                    b.HasOne("om.servicing.casemanagement.domain.Entities.OMCase", "Case")
                        .WithMany("Interactions")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("om.servicing.casemanagement.domain.Entities.OMTransaction", b =>
                {
                    b.HasOne("om.servicing.casemanagement.domain.Entities.OMCase", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("om.servicing.casemanagement.domain.Entities.OMInteraction", "Interaction")
                        .WithMany("Transactions")
                        .HasForeignKey("InteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("om.servicing.casemanagement.domain.Entities.OMTransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Interaction");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("om.servicing.casemanagement.domain.Entities.OMCase", b =>
                {
                    b.Navigation("Interactions");
                });

            modelBuilder.Entity("om.servicing.casemanagement.domain.Entities.OMInteraction", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
